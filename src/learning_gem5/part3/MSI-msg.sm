// enumeration(CoherenceResponseType, desc = "Types of response messages") {
//     Data,   desc = "Contains the most up-to-date data";
//     InvAck, desc = "Message from another cache that they have inv. the blk";
// }

// enumeration(CoherenceRequestType, desc = "Types of request messages") {
//     GetS,   desc = "Request from cache for a block with read permission";
//     GetM,   desc = "Request from cache for a block with write permission";
//     PutS,   desc = "Sent to directory when evicting a block in S (clean WB)";
//     PutM,   desc = "Sent to directory when evicting a block in M";

//     // "Requests" from the directory to the caches on the fwd network
//     Inv,    desc = "Probe the cache and invalidate any matching blocks";
//     PutAck, desc = "The put request has been processed";
// }

// structure(RequestMsg, desc = "Used for Cache->Dir and Fwd messages", interface = "Message") {
//     Addr addr,                      desc = "Physical address for this response";
//     CoherenceRequestType Type,      desc = "Type of request";
//     MachineID Requestor,            desc = "Node who initiates the request";
//     NetDest Destination,            desc = "Multicast destination mask";
//     DataBlock DataBlk,              desc = "Data for the cache line";
//     MessageSizeType MessageSize,    desc = "Size category of the message";

//     bool functionalRead(Packet* pkt) {
//         // Requests should never have the only copy of the most up-to-date data
//         return false;
//     }
//     bool functionalWrite(Packet* pkt) {
//         // No check on message type required since the protocol should read
//         // data block from only those messages that contain valid data
//         return testAndWrite(addr, DataBlk, pkt);
//     }
// }

// structure(ResponseMsg, desc = "Used for Dir->Cache and Fwd message responses", interface = "Message") {
//     Addr addr,                      desc = "Physical address for this response";
//     CoherenceResponseType Type,     desc = "Type of response";
//     MachineID Sender,               desc = "Node who is responding to the request";
//     NetDest Destination,            desc = "Multicast destination mask";
//     DataBlock DataBlk,              desc = "Data for the cache line";
//     MessageSizeType MessageSize,    desc = "Size category of the message";
//     int Acks,                       desc = "Number of acks required from others";

//     // This must be overridden here to support functional accesses
//     bool functionalRead(Packet* pkt) {
//         if (Type == CoherenceResponseType:Data) {
//             return testAndRead(addr, DataBlk, pkt);
//         }
//         return false;
//     }

//     bool functionalWrite(Packet* pkt) {
//         // No check on message type required since the protocol should read
//         // data block from only those messages that contain valid data
//         return testAndWrite(addr, DataBlk, pkt);
//     }
// }

enumeration(CoherenceResponseType, desc = "Types of response messages") {
    Data,   desc = "Contains the most up-to-date data";
    InvAck, desc = "Message from another cache that they have inv. the blk";
}

enumeration(CoherenceRequestType, desc = "Types of request messages") {
    GetS,   desc = "Request from cache for a block with read permission";
    GetM,   desc = "Request from cache for a block with write permission";
    PutS,   desc = "Sent to directory when evicting a block in S (clean WB)";
    PutM,   desc = "Sent to directory when evicting a block in M";

    // "Requests" from the directory to the caches on the fwd network
    Inv,    desc = "Probe the cache and invalidate any matching blocks";
    PutAck, desc = "The put request has been processed";
}

structure(RequestMsg, desc = "Used for Cache->Dir and Fwd messages", interface = "Message") {
    Addr addr,                      desc = "Physical address for this response";
    CoherenceRequestType Type,      desc = "Type of request";
    MachineID Requestor,            desc = "Node who initiates the request";
    NetDest Destination,            desc = "Multicast destination mask";
    DataBlock DataBlk,              desc = "Data for the cache line";
    MessageSizeType MessageSize,    desc = "Size category of the message";

    bool functionalRead(Packet* pkt) {
        // Requests should never have the only copy of the most up-to-date data
        return false;
    }
    bool functionalWrite(Packet* pkt) {
        // No check on message type required since the protocol should read
        // data block from only those messages that contain valid data
        return testAndWrite(addr, DataBlk, pkt);
    }
}

structure(ResponseMsg, desc = "Used for Dir->Cache and Fwd message responses", interface = "Message") {
    Addr addr,                      desc = "Physical address for this response";
    CoherenceResponseType Type,     desc = "Type of response";
    MachineID Sender,               desc = "Node who is responding to the request";
    NetDest Destination,            desc = "Multicast destination mask";
    DataBlock DataBlk,              desc = "Data for the cache line";
    MessageSizeType MessageSize,    desc = "Size category of the message";
    int Acks,                       desc = "Number of acks required from others";

    // This must be overridden here to support functional accesses
    bool functionalRead(Packet* pkt) {
        if (Type == CoherenceResponseType:Data) {
            return testAndRead(addr, DataBlk, pkt);
        }
        return false;
    }

    bool functionalWrite(Packet* pkt) {
        // No check on message type required since the protocol should read
        // data block from only those messages that contain valid data
        return testAndWrite(addr, DataBlk, pkt);
    }
}
